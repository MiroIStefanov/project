"use strict";

function solve() {
    let isValid = 5 > 6;// Променливите които са булев тип е прието да заппочват със isXxxxx както тази е написана. Булевите изрази(5 > 6) в случая, не е задължително да се запазват в променливи. Ако се запазят в променливи както е в сучая, този тип променливи се наричат ФЛАГОВЕ. 
    console.log(isValid);
}
solve();


// .toLowerCase - прави всички букви малки
// .toUpperCase - прави всички букви големи
function solve1() {
    console.log('Todor' === 'todor');// false
    console.log('Todor'.toLowerCase === 'todor'.toLowerCase);// ftrue
    console.log('Todor'.toUpperCase === 'todor'.toUpperCase);// ftrue
}
solve1();


/*
1.	Сумиране на секунди 
Трима спортни състезатели финишират за някакъв брой секунди (между 1 и 50). Да се напише функция, която получава три аргумента - секунди и пресмята сумарното им време във формат "минути:секунди". Секундите да се изведат с водеща нула (2  "02", 7  "07", 35  "35"). 
("35", "45", "44")
	2:04		("22", "7", "34")
	1:03		("50", "50", "49")
	2:29		("14", "12", "10")
	0:36
Насоки

1.	Преобразувайте получените секунди от стрингове в числа.
2.	Създайте нова променлива, в която да съхранявате сбора от секундите на тримата състезатели:
 
3.	След като сте намерили сбора от секундите трябва да ги превърнете в минути и секунди (например, ако сборът е 85 секунди това са 1 минута и 25 секунди, защото 1 минута има 60 секунди). Създайте си две нови променливи. В първата изчислете, колко минути е сбора от секунди, като разделите сбора на 60. Във втората променлива изчислете секундите с помощта на деление с остатък (%). Използвайте деление с остатък (%), за да вземете остатъка при деление с 60, което са останалите секунди. Например имате общ сбор от 134 секунди (2 минути и 14 секунди) след целочисленото деление (/) на 60 ще получим 2, а след  делението с остатък (%) ще получим оставащите секунди(14).
 
4.	След като вече знаете, колко минути и секунди е общия сбор, трябва да ги изпринтираме в правилния формат (минути : секунди), като ако секундите са по-малки от 10 трябва да изпечатаме 0 преди секундите, в противен случай просто си изпечатваме резултата в дадения формат. За целта направете проверка (if). За принтирането може да използвате place holder.
 */


 function sumSec(arg1, arg2, arg3) {
    let t1 = Number(arg1);
    let t2 = Number(arg2);
    let t3 = Number(arg3);

    let allSec = t1 + t2 + t3;
    // let min = parseInt(allSec / 60);
    let min = Math.floor(allSec / 60);
    let sec = allSec % 60;

    if(sec < 10) {
        console.log(`${min}:0${sec}`);
    } else {
        console.log(`${min}:${sec}`);
    }
 }
 sumSec("14", "12", "10");

/*
2.	Бонус точки
Дадено е цяло число – начален брой точки. Върху него се начисляват бонус точки по правилата, описани по-долу. Да се напише функция, която пресмята бонус точките, които получава числото и общия брой точки (числото + бонуса).
•	Ако числото е до 100 включително, бонус точките са 5.
•	Ако числото е по-голямо от 100, бонус точките са 20% от числото.
•	Ако числото е по-голямо от 1000, бонус точките са 10% от числото.

•	Допълнителни бонус точки (начисляват се отделно от предходните):
o	За четно число  + 1 т.
o	За число, което завършва на 5  + 2 т.
Примери:
вход	изход		вход	изход		вход	изход		("20")	6        ("175")	37         ("2703")	270.3
        26	                212	                2973.3	       	
вход	     изход
("15875")	1589.5
            17464.5
Насоки:

1.	Преобразувайте си входните данни от стринг в число.
2.	Създайте си нова променлива, в която ще си изчислявате натрупаните бонус точки, като и дадете начална стойност 0.0.
 
3.	Направете if-else-if конструкция за първите три проверки, за да проверите големината на числото и да изчислите бонуса. 
 
4.	Направете нова if-else-if конструкция, за да извършите проверките и  изчислите допълнителния бонус. Ако числото е четно към до момента натрупания бонус добавете 1, а ако завършва на 5 към бонуса добавете 2. За да проверите, дали едно число е четно трябва да го разделите на 2 и ако получавате остатък при делението 0, то значи числото е четно, но ако получите остатък 1, това означава, че числото е нечетно. Например числото 34 е четно, защото 34 / 2 = 17 и остатъкът е 0, а числото 35 е нечетно, защото 35 / 2 = 17 с остатък 1. За да проверите, дали едно число завършва на 5 трябва да разделите числото на 10 и ако получите остатък при делението 5, то значи числото завършва на 5. Например числото 245 / 10 = 24 с остатък 5.
 
5.	Принтирайте на два реда резултатите. На първия ред натрупания бонус, а на втория крайното число, което ще намерите, като съберете началния брой точки и бонуса.
*/

function bonusScore(arg) {
    let score = Number(arg);
    let bonus = 0;

    if (score <= 100) {
        bonus = 5;
    } else if (score < 1000) {
        bonus = score * 0.2;
    } else {
        bonus = score * 0.1;
    }
   
    if (score % 2 === 0) {
        bonus = bonus + 1;
    }
    if (score % 10 === 5) {
        bonus = bonus + 2;
    }
    // % 10 връща последната цифра от числото, % 100 връща последните две цифри от числото, % 1000 връща последните три цифри от числото и т.н.
    console.log(bonus);
    console.log(score + bonus);
}
bonusScore("20");


/*
Да се напише функция, която получава скорост (реално число)и отпечатва информация за скоростта. При скорост до 10 (включително) отпечатайте "slow". При скорост над 10 и до 50 отпечатайте "average". При скорост над 50 и до 150 отпечатайте "fast". При скорост над 150 и до 1000 отпечатайте "ultra fast". При по-висока скорост отпечатайте "extremely fast". Примери:
вход	изход		вход	    изход		вход	изход
("8")	slow		("49.5")	average		("126")	fast
вход	  изход		       вход	        изход
("160")	ultra fast		("3500")	extremely fast
1.	Използвайте if-else-if конструкция, за да проверите стойностите за скоростта.
*/

function speedometer (input) {

    let speed = Number(input);

    if (speed <= 10) {
        console.log('slow');
    } else if (speed <= 50) {
        console.log('average');
    } else if (speed <= 150) {
        console.log('fast');
    } else if (speed <= 1000) {
        console.log('ultra fast');
    } else {
        console.log('extremely fast');
    }
}
speedometer("3500");



/*
4.	Конвертор за мерни единици
Да се напише функция, която преобразува разстояние между следните 3 мерни единици: mm, cm, m. Използвайте съответствията от таблицата по-долу:
входна единица	изходна единица
1 meter (m)	1000 millimeters (mm)
1 meter (m)	100 centimeters (cm)
Входните данни се състоят от три аргумента:
•	Първи : число за преобразуване - реално число 
•	Втори : входна мерна единица - текст
•	Трети : изходна мерна единица (за резултата) - текст
На конзолата да се отпечата резултатът от преобразуването на мерните единици форматиран до третия знак след десетичната запетая.
*/

function distanceConverter(arg1, arg2, arg3) {

    let num = Number(arg1);
    let inRange = arg2;
    let outRange = arg3;
    let output = 0;

    if (inRange === 'mm') {
        if (outRange === 'cm') {
            output = num / 10;
        }
        if (outRange === 'm') {
            output = num / 1000;
        }
    } else if (inRange === 'cm') {
        if (outRange === 'mm') {
            output = num * 10;
        }
        if (outRange === 'm') {
            output = num / 100;
        }
    } else {
        if (outRange === 'cm') {
            output = num * 100;
        }
        if (outRange === 'mm') {
            output = num * 1000;
        }
    } 
    console.log(output.toFixed(3));
}
distanceConverter("45", "cm", "mm");


/*
5.	Време + 15 минути
Да се напише функция, която получава час и минути от 24-часово денонощие и изчислява колко ще е часът след 15 минути. Резултатът да се отпечата във формат часове:минути. Часовете винаги са между 0 и 23, а минутите винаги са между 0 и 59. Часовете се изписват с една или две цифри. Минутите се изписват винаги с по две цифри, с водеща нула, когато е необходимо
*/

function timeCalc (tHours, tMinutes) {

    let inHours = Number(tHours);
    let inMin = Number(tMinutes);

    let time = (inHours * 60) + inMin + 15;
    let hours = Math.floor(time / 60);
    let min = time % 60;

    if ( hours === 24) {
        hours = 0;
    }
    if (min < 10) {
        console.log(`${hours}:0${min}`);
    } else {
        console.log(`${hours}:${min}`);
    }
    
}
timeCalc("23", "59");


/*
6.	Годзила срещу Конг
Снимките за дългоочаквания филм "Годзила срещу Конг" започват. Сценаристът Адам Уингард ви моли да напишете функция, която да изчисли, дали предвидените средства са достатъчни за снимането на филма. За снимките  ще бъдат нужни определен брой статисти, облекло за всеки един статист и декор.
Известно е, че:
•	Декорът за филма е на стойност 10% от бюджета. 
•	При повече от 150 статиста,  има отстъпка за облеклото на стойност 10%.
Вход
Функцията получава 3 аргумента:
1.	Бюджет за филма – реално число в интервала [1.00 … 1000000.00]
2.	Брой на статистите – цяло число в интервала [1 … 500]
3.	Цена за облекло на един статист – реално число в интервала [1.00 … 1000.00]
Изход
На конзолата трябва да се отпечатат два реда:
•	Ако  парите за декора и дрехите са повече от бюджета:
o	"Not enough money!"
o	"Wingard needs {парите недостигащи за филма} leva more."
•	Ако парите за декора и дрехите са по малко или равни на бюджета:
o	"Action!" 
o	"Wingard starts filming with {останалите пари} leva left."
Резултатът трябва да е форматиран до втория знак след десетичната запетая.
Примерен вход и изход
*/

function movie (arg1, arg2, arg3) {

    let budget = Number(arg1);
    let statics = Number(arg2);
    let oneDress = Number(arg3);

    let decor = budget * 0.1;
    let dressSum = statics * oneDress;

    if (statics >= 150) {
        dressSum = dressSum * 0.9;
    }

    let outSum = Math.abs(budget - dressSum - decor);
    
    if ((dressSum + decor) > budget) {
        //outSum = (dressSum + decor) - budget;
        console.log(`Not enough money!`);
        console.log(`Wingard needs ${outSum.toFixed(2)} leva more.`);
    } else {
        console.log(`Action!`);
        console.log(`Wingard starts filming with ${outSum.toFixed(2)} leva left.`);
    }
}
movie("9587.88", "222", "55.68");

/*
7.	Световен рекорд по плуване
Иван решава да подобри Световния рекорд по плуване на дълги разстояния. Функцията получава: рекордът в секунди,  който Иван трябва да подобри,  разстоянието в метри, което трябва да преплува и времето в секунди, за което плува разстояние от 1 м. Да се напише функция, която изчислява дали се е справил със задачата, като се има предвид, че: съпротивлението на водата го забавя на всеки 15 м. с 12.5 секунди. Когато се изчислява колко пъти Иванчо ще се забави, в резултат на съпротивлението на водата, резултатът трябва да се закръгли надолу до най-близкото цяло число.
Да се изчисли времето в секунди, за което Иванчо ще преплува разстоянието и разликата спрямо Световния рекорд. 
Вход
Функцията получава 3 аргумента:
1.	Рекордът в секунди – реално число в интервала [0.00 … 100000.00]
2.	Разстоянието в метри – реално число в интервала [0.00 … 100000.00]
3.	Времето в секунди, за което плува разстояние от 1 м. - реално число в интервала [0.00 … 1000.00]
Изход
Отпечатването на конзолата зависи от резултата:
•	Ако Иван е подобрил Световния рекорд отпечатваме:
o	" Yes, he succeeded! The new world record is {времето на Иван} seconds."
•	Ако НЕ е подобрил рекорда отпечатваме:
o	"No, he failed! He was {недостигащите секунди} seconds slower."
Резултатът трябва да се форматира до втория знак след десетичната запетая.
*/


function worldRec (rec, meters, seconds) {
    
    let record = Number(rec);
    let distance = Number(meters);
    let time1m = Number(seconds);

    let timeDelay = Math.floor(distance / 15) * 12.5;
    let time = time1m * distance;
    let fullTime = time + timeDelay;

    if(fullTime < record) {
        console.log(`Yes, he succeeded! The new world record is ${fullTime.toFixed(2)} seconds.`);
    } else {
        fullTime = fullTime - record;
        console.log(`No, he failed! He was ${fullTime.toFixed(2)} seconds slower.`);
    }
}
worldRec("55555.67", "3017", "5.03");


/*
8.	*Стипендии
Учениците могат да кандидатстват за социална стипендия или за стипендия за отличен успех. Изискване за социална стипендия - доход на член от семейството по-малък от минималната работна заплата и успех над 4.5. Размер на социалната стипендия - 35% от минималната работна заплата. Изискване за стипендия за отличен успех - успех над 5.5, включително. Размер на стипендията за отличен успех - успехът на ученика, умножен по коефициент 25.
Напишете функция, която при въведени доход, успех и минимална работна заплата, дава информация дали ученик има право да получава стипендия, и стойността на стипендията, която е по-висока за него.
Вход
Функцията получава 3 аргумента:
1.	Доход в лева - реално число в интервала [0.00..6000.00]
2.	Среден успех -  реално число в интервала [2.00...6.00]
3.	Минимална работна заплата - реално число в интервала [0.00..1000.00]
Изход
•	Ако ученикът няма право да получава стипендия, се извежда:
"You cannot get a scholarship!"
•	Ако ученикът има право да получава социална стипендия и тя е по-висока от стипендията за отличен успех:
"You get a Social scholarship {стойност на стипендия} BGN"
•	Ако ученикът има право да получава стипендия за отличен успех и тя е по-висока или равна по стойност на социалната стипендия за него:
•	"You get a scholarship for excellent results {стойност на стипендията} BGN"
Резултатът се закръгля до по-малкото цяло число.
*/


// Грешен вариант
// function scholarship (arg1, arg2, arg3) {

//     let income = Number(arg1);
//     let success = Number(arg2);
//     let minWage = Number(arg3);

//     let socialScholar = minWage * 0.35;
//     let successScholar = success * 25;

//     if(success <= 4.50) {
//         console.log("You cannot get a scholarship!");
//     } else if(income < minWage) {
//         if(success >= 5.50) {
//             if(successScholar >= socialScholar)   {
//                 console.log(`You get a scholarship for excellent results ${Math.floor(successScholar)} BGN`);
//             } else if (socialScholar > successScholar) {
//                  console.log(`You get a Social scholarship ${Math.floor(socialScholar)} BGN`);
//             }
//         } else if(success > 4.50) {
//             console.log(`You get a Social scholarship ${Math.floor(socialScholar)} BGN`);
//         }
                        
//     } else if (income > minWage) {
//         if(success >= 5.50) {
//             console.log(`You get a scholarship for excellent results ${Math.floor(successScholar)} BGN`);
//         }
//         if(success < 5.50) {
//                 console.log("You cannot get a scholarship!");
//         } 
//     }   
// }
// scholarship("300.00", "5.65", "420.00");
// scholarship("480.00", "4.60", "450.00");


function scholarship (arg1, arg2, arg3) {

    let income = Number(arg1);
    let success = Number(arg2);
    let minWage = Number(arg3);

    let socialScholar = 0;
    let successScholar = 0;

    let isSocialScholar = false;
    let isScholar = false;

    if (income < minWage) {
        isSocialScholar = true;
        socialScholar = Math.floor(minWage * 0.35);
        isScholar = true;
    }
    if(success >= 5.5) {
        successScholar = Math.floor(success * 25);
        isScholar = true;
    }
    if(success < 4.5) {
        isSocialScholar = false;
        isScholar = false;

    }if(!isScholar) {
        console.log("You cannot get a scholarship!");
    } else if(socialScholar > successScholar) {
        console.log(`You get a Social scholarship ${socialScholar} BGN`);
    } else if(successScholar >= socialScholar) {
        console.log(`You get a scholarship for excellent results ${successScholar} BGN`);
    }
}
scholarship("300.00", "5.65", "420.00");
scholarship("480.00", "4.60", "450.00");


